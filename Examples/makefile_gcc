TARGET = main

HEADS =
SRC = main
LIBS =

TDIR = bin
IDIR = include
BDIR = build
SDIR = src

HEADEXT = h
SRCEXT = c
OBJEXT = o
TRGEXT = x

RUNOPTIONS =

DEPS = $(patsubst %, $(IDIR)/%.$(HEADEXT), $(HEADS))
OBJS = $(patsubst %, $(BDIR)/%.$(OBJEXT), $(SRC))
SCRS = $(patsubst %, $(SDIR)/%.$(SRCEXT), $(SRC))
RULES = $(patsubst %, $(BDIR)/%.d, $(SRC))

ifeq ($(strip $(TRGEXT)), )
	TRGNAME=$(TARGET)
else
	TRGNAME=$(TARGET).$(TRGEXT)
endif

CC = gcc
CFLAGS = -Wall -Wextra
CPPFLAGS = -I $(IDIR)
LDFLAGS = $(LIBS)
ifneq (${RELEASE}, y)  
	CFLAGS += -g
else
	CFLAGS += -O2
	LDFLAGS += -s
endif

CPPFLAGS += -MMD -MP
 
.SUFFIXES :

.PHONY : all
all: $(TDIR)/$(TRGNAME)

$(BDIR)/%.$(OBJEXT) : $(SDIR)/%.$(SRCEXT)
	$(CC) -c $(CPPFLAGS) $(CFLAGS) -o $@ $<
 
$(TDIR)/$(TRGNAME): $(OBJS)
	$(CC) $(LDFLAGS) -o $@ $^
 
.PHONY : clean
clean :
	rm -f $(TDIR)/$(TRGNAME) $(OBJS) $(RULES)

.PHONY : run
run : $(TDIR)/$(TRGNAME)
	@$(TDIR)/$(TRGNAME) $(RUNOPTIONS)

.PHONY : format
format : $(SCRS) $(DEPS)
	@clang-format -i $^

.PHONY : release
release :
	@$(MAKE) RELEASE=y --no-print-directory -B

.PHONY : valgrind
valgrind : $(TDIR)/$(TRGNAME)
	valgrind --leak-check=full --track-origins=yes $(TDIR)/$(TRGNAME) $(RUNOPTIONS)

$(shell mkdir -p $(BDIR) $(TDIR))

-include $(RULES)
